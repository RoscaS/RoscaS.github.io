---
layout: post
title: "Py: OOP 6 Méthodes magiques"
subtitle: "Programmation orienté objet"
date: 2017-07-29
author: Sol
category: Py
tags: divers, fr, en
finished: false
---

#### sources
* [sam&max](http://sametmax.com/le-guide-ultime-et-definitif-sur-la-programmation-orientee-objet-en-python-a-lusage-des-debutants-qui-sont-rassures-par-les-textes-detailles-qui-prennent-le-temps-de-tout-expliquer-partie-1/)


# Méthodes magiques

Les méthodes automatiques (ou magiques) sont les méthodes nommées avec deux doubles underscore (`def __methode__(self)`).

## __del__

C'est la sémantique inverse d'`__init__`, c'est une méthode appelée quand l'objet est **détruit**.

```python
import time

class Action(object):
    def __del__(self):
        print("Destruction")

>>> a = Action()
>>> del a
Destruction
>>> time.sleep(1) # laisse le temps au GC de faire son travail
```

On l'utilise pour nettoyer une fois qu'un objet n'est plus utile (fermer les sockets, les fichiers,...).

<span style="color:red"> **ATTENTION** </span> <br>

Le mot clé `del` en Python ne détruit pas un objet. **Il détruit la référence**. C'est l'interpreteur Python qui compte les références des objets, et quand un objet n'a plus de référence pointant vers lui, il est marqué pour suppression.

Ensuite, le **garbage collector** (GB) arrive. <span style="color:red"> Ceci n'est pas prédictible </span>. Il peut arriver tout de suite après, ou mille opérations plus tard. Et une fois qu'il est là, il supprime tous les objets marqués pour suppression.

Alors seulement `__del__` est appelée.

En gros, `__del__`peut être appelée **beaucoup plus tard** que ce qu'on ne pense, voir même pas dutout (si le scripte s'arrête avant). D'où le `time.sleep(1) dans le code pour donner de grandes chances à la méthode d'être appelée.