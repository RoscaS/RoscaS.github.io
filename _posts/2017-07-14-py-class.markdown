* Objet ---
  layout: post
  title: "Py: classes"
  subtitle: "Python: Programmation orientée objet "
  date: 2017-07-14
  author: Sol
  category: Py
  tags:  
  finished: false
---

## Introduction

**Un objet en Python est défini par sa structure (les attributs qu'il contient et les méthodes qu'il lui sont applicables) plutôt que par son type.**

Python est entièrement construit autour de cette idée appelée _**duck-typing**_: 

> "Si je vois un animal qui vole comme un canard, cancane comme un canard, et nage comme un canard, alors j'appelle cet oiseau un cannard" (James Whitcomb Riley)

La **programmation orientée objet** est le _**paradigme**_ qui nous permet de définir nos propres types d'objets, avec leurs propriétés et opérations.

## Objet et caractéristiques

Un objet est constitué de 3 caractéristiques:
1. Un **type** qui identifie le **rôle** de l'objet.
2. Des **attributs** qui sont les **propriétés** de l'objet.
3. Des **méthodes**, les **opérations** (actions) qui s'appliquent sur l'objet.


#### Exemples

* On instancie un variable **number** de type `int` 

```python
>>> number = 5
```

* `numerator` est un attribut de **number**

```python
>>> number.numerator
5
```

* Variable **values** de type `list`

```python
>>> values = []
```

* `append` est une méthode de **values**

```python
>>> values.append(number)
>>> values
[5]
```

* Toute valeur en Python est donc un objet
* Tout objet est associé à un type

Un type définit la sémantique d'un objet. On sait par exemple que les objets de type `int` sont des nombres entiers, que l'on peut additionner, soustraire, etc...

Pour créer un nouveau type en Python nous utilisons le mot clé `class` :

```python
class User:
    pass
```

Nous avons maintenant à notre disposition un type `User`. Pour créer un objet de ce type, il nous suffit de procéder comme suit:

```python
john = User()
```

On dit alors que **john** est une instance de `User`.



## Attributs

Ils représentent des valeurs propres à l'objet. Nos objets de type `User` pourraient par exemple contenir un identifiant `id`, un nom `name` et un mot de passe `passeword`. 

En python, nous pouvons facilement associer des valeurs à nos objets:

```python
class User:
    pass

john = User()
john.id = 1
john.name = 'john'
john.password = '12345'

print(john.id)
print(john.name)
print(john.password)
```

output:

```
1
john
12345
```

Nous avons instancié un objet nommé john, de type `User`, auquel nous avons attribué trois attributs puis nous avons affiché les valeurs de ces attributs.

À noter que l'on peut redéfinir la valeur d'un attribut, et qu'un attribut peut aussi être supprimé à l'aide de l'opérateur `del` 

```python
del john.password
print(john.password)
```

output:

```python
Traceback (most recent call last):
  File "/home/sol/Code/Python/Tuto/Class/00tests/00.py", line 14, in <module>
    print(john.password)
AttributeError: 'User' object has no attribute 'password'
```

> Il est déconseillé de nommer une valeur de la même manière qu'une fonction _built-in_ 








## Association 

```python
import crypt, datetime

class User:
    def __init__(self, id, name, password):
        self.id        = id
        self.name      = name
        self._salt     = crypt.mksalt()
        self._passowrd = self._crypt_pwd(password)
    
    def _crypt_pwd(self, password):
        return crypt.crypt(password, self._salt)

    def check_pwd(self, password):
        return self._passowrd == self._crypt_pwd(password)

    def post(self, message):
        return Post(self, message)

class Post:
    def __init__(self, author, message):
        self.author  = author
        self.message = message
        self.date    = datetime.datetime.now()
    
    def format(self):
        date = self.date.strftime('le %d/%m/%y à %H:%M:%S')
        return '<div><span>Par {} {}</span><p>{}</p></div>'\
            .format(self.author.name, date, self.message)

if __name__ == '__main__':
    user = User(1, 'john', '12345')
    p    = user.post('Salut à tous')
    print(p.format())

```

output:

```
<div><span>Par john le 14/07/17 à 04:40:11</span><p>Salut à tous</p></div>
```

