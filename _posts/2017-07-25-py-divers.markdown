---
layout: post
title: "Py: Divers"
subtitle: "En vrac..."
date: 2017-07-25
author: Sol
category: Py
tags: divers, fr, en
finished: false
---

* [how to make an immutable object in python](https://stackoverflow.com/questions/4828080/how-to-make-an-immutable-object-in-python)
* [Gestion de fichier (module os)](http://apprendre-python.com/page-gestion-fichiers-dossiers-python)

## Liens

* [apprendre-Python](http://apprendre-python.com/)
* [sam&max](http://sametmax.com/cours-et-tutos/)
* [zest de savoir](https://zestedesavoir.com/contenus/?tag=python)
* [intermediate pythonista](http://intermediatepythonista.com/)



## Divers

* Toute valeur en Python est un objet
* En Python toutes les variables sont des références vers des objets
* Il n'y a pas de **vrai** constantes en Python! </span> On parle de constante quand une variable est écrite toute en majuscules (**convention**) et qu'elle est sensé ne jamais changer.

## Duck typing

**Un objet en Python est défini par sa structure (les attributs qu'il contient et les méthodes qu'il lui sont applicables) plutôt que par son type.**

Python est entièrement construit autour de cette idée appelée _**duck-typing**_: 

> "Si je vois un animal qui vole comme un canard, cancane comme un canard, et nage comme un canard, alors j'appelle cet oiseau un cannard" (James Whitcomb Riley)


## Operateur ternaire 

```python
<expression> if <condition> else <expression2>

result = x if a > b else y

```


## Shallow and deep copy

Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations.

```python
import copy
```

Return a shallow copy of x:

```python
copy.copy(x)
```

Return a deep copy of x:

```python
copy.deepcopy(x)
```

* A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.

* A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.

In order for a class to define its own copy implementation, it can define special methods `__copy__()` and `__deepcopy__()`. The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the memo dictionary. If the `__deepcopy__()` implementation needs to make a deep copy of a component, it should call the deepcopy() function with the component as first argument and the memo dictionary as second argument.



## if \_\_name\_\_ == '_\_main\_\_'

C'est une expression idiomatique qu'on utilise en Python pour éviter de lancer une partie de code si on importe ce script dans un autre.

```python
# fichier poule.py

def poule():
    print("cotCot")

poule()
```

Suite à:

* `./poule.py` dans un terminal la fonction `poule()` sera lancée
* `import poule **dans un autre script** la fonction `poule()` sera lancée aussi

Ce n'est pas forcément ce qu'on veut et le code suivant permet d'éviter ça.

```python
# fichier poule.py

def poule():
    print("cotCot")

if __name__ == '__main__':
    poule()
```

De cette façon si on fait `./poule.py` va lancer `poule()` mais pas `import poule` dans un autre scripte.

#### Explication

La variable `__name__` est une variable automatiquement créée par Python, toujours disponible, dans tous les scripts. Elle **contient le nom du script courant** si on importe le script. 

Si le script est le script principal, alors `__name__` ne content pas le nom du script mais une string qui contient `__main__`.

```python
# fichier fichier_poule.py

print(__name__)
```

output:

```python
__main__
```



```python
# fichier fichier_cochon.py

import poule
```

output:

```python
fichier_poule
```

#### Sources
[samEtMax](http://sametmax.com/pourquoi-if-__name__-__main__-en-python/)


## API

<span style="color:red"> A étoffer! </span> <br>
En bref, c'est une interface.