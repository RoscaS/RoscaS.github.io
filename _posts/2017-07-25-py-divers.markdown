---
layout: post
title: "Py: Divers"
subtitle: "En vrac..."
date: 2017-07-25
author: Sol
category: Py
tags: divers, fr, en
finished: false
---

* [how to make an immutable object in python](https://stackoverflow.com/questions/4828080/how-to-make-an-immutable-object-in-python)
* [Gestion de fichier (module os)](http://apprendre-python.com/page-gestion-fichiers-dossiers-python)

## Liens

* [apprendre-Python](http://apprendre-python.com/)
* [sam&max](http://sametmax.com/cours-et-tutos/)
* [zest de savoir](https://zestedesavoir.com/contenus/?tag=python)
* [intermediate pythonista](http://intermediatepythonista.com/)
* [super tuto list comprehension](http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/)
* [multi dim array](https://snakify.org/lessons/two_dimensional_lists_arrays/)
* [print 2d array](https://stackoverflow.com/questions/45027681/pythonic-way-to-print-2d-list-python)
* [Dictionnaires](http://xahlee.info/python/python_dictionary_methods.html)
* [Deep into Python and CS](https://www.cs.hmc.edu/csforall/index.html#)
* [gross collection d'exercices](http://snakify.org/)

## Livres

* [Python 101, livre complet en ligne](http://python101.pythonlibrary.org/g)



```python
def alphabet():
    ''''return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"'''
    return ''.join(chr(i) for i in range(ord('A'), ord('Z') + 1))
    # return "ABCDEFGHIJKLMNOPQRSTUVWXYZ
```







## Color trackBack

* [ultratb.ColorTB() (IPython)](https://stackoverflow.com/questions/37081116/how-to-get-pythons-terminal-error-to-be-in-color)

```python
try:
    import IPython.core.ultratb
except ImportError:
    # No IPython. Use default exception printing.
    pass
else:
    import sys
    sys.excepthook = IPython.core.ultratb.ColorTB()
```


* [colored-traceback](https://pypi.python.org/pypi/colored-traceback/0.3.0)

```
sudo pip3 install colored-traceback
```




## Divers

* Toute valeur en Python est un objet
* En Python toutes les variables sont des références vers des objets
* Il n'y a pas de **vrai** constantes en Python! </span> On parle de constante quand une variable est écrite toute en majuscules (**convention**) et qu'elle est sensé ne jamais changer.

## Duck typing

**Un objet en Python est défini par sa structure (les attributs qu'il contient et les méthodes qu'il lui sont applicables) plutôt que par son type.**

Python est entièrement construit autour de cette idée appelée _**duck-typing**_: 

> "Si je vois un animal qui vole comme un canard, cancane comme un canard, et nage comme un canard, alors j'appelle cet oiseau un cannard" (James Whitcomb Riley)



## Shallow and deep copy

Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations.

```python
import copy
```

Return a shallow copy of x:

```python
copy.copy(x)
```

Return a deep copy of x:

```python
copy.deepcopy(x)
```

* A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.

* A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.

In order for a class to define its own copy implementation, it can define special methods `__copy__()` and `__deepcopy__()`. The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the memo dictionary. If the `__deepcopy__()` implementation needs to make a deep copy of a component, it should call the deepcopy() function with the component as first argument and the memo dictionary as second argument.



## if \_\_name\_\_ == '_\_main\_\_'

C'est une expression idiomatique qu'on utilise en Python pour éviter de lancer une partie de code si on importe ce script dans un autre.

```python
# fichier poule.py

def poule():
    print("cotCot")

poule()
```

Suite à:

* `./poule.py` dans un terminal la fonction `poule()` sera lancée
* `import poule **dans un autre script** la fonction `poule()` sera lancée aussi

Ce n'est pas forcément ce qu'on veut et le code suivant permet d'éviter ça.

```python
# fichier poule.py

def poule():
    print("cotCot")

if __name__ == '__main__':
    poule()
```

De cette façon si on fait `./poule.py` va lancer `poule()` mais pas `import poule` dans un autre scripte.

#### Explication

La variable `__name__` est une variable automatiquement créée par Python, toujours disponible, dans tous les scripts. Elle **contient le nom du script courant** si on importe le script. 

Si le script est le script principal, alors `__name__` ne content pas le nom du script mais une string qui contient `__main__`.

```python
# fichier fichier_poule.py

print(__name__)
```

output:

```python
__main__
```



```python
# fichier fichier_cochon.py

import poule
```

output:

```python
fichier_poule
```

#### Sources
[samEtMax](http://sametmax.com/pourquoi-if-__name__-__main__-en-python/)


## API

<span style="color:red"> A étoffer! </span> <br>
En bref, c'est une interface.


# Tricks


## Enumerate

Bad way:

```python
ferme = ["vache", "poule", "cochon", "mouton"]

c = 0
for i in ferme:
    print(c, i)
    i += 1
```

`enumerate`'s way:

```python
ferme = ["vache", "poule", "cochon", "mouton"]

for c, i in enumerate(ferme):
    print(c, i)
```

## Inline if-else statement (Operateur ternaire)


```python
<expression> if <condition> else <expression2>

result = x if a > b else y

x = 2
print("yep") if (x == 2) else print("nop")

```

## Lettre de l'alphabet dans une liste

```python
letters = [chr(i) for i in range(ord('a'), ord('j')+1)]
```

## Being pythonic

#### Regular way (C like):

```python
>>> alph = []
>>> for i in range(ord('A'), ord('Z')+1):
...     alph.append(chr(i))
... 
>>> print(alph)
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
>>>
>>>
>>> l = []
>>> for i in range(10):
...     for j in alph[:10]:
...         l.append(j+str(i))
...
>>>
>>>
>>>for i, j in enumerate(l):
...     if (i % 10 == 0) and (i > 0):
...         print()
...     print(j, end=' ')
...
A0 B0 C0 D0 E0 F0 G0 H0 I0 J0
A1 B1 C1 D1 E1 F1 G1 H1 I1 J1
A2 B2 C2 D2 E2 F2 G2 H2 I2 J2
A3 B3 C3 D3 E3 F3 G3 H3 I3 J3
A4 B4 C4 D4 E4 F4 G4 H4 I4 J4
A5 B5 C5 D5 E5 F5 G5 H5 I5 J5
A6 B6 C6 D6 E6 F6 G6 H6 I6 J6
A7 B7 C7 D7 E7 F7 G7 H7 I7 J7
A8 B8 C8 D8 E8 F8 G8 H8 I8 J8
A9 B9 C9 D9 E9 F9 G9 H9 I9 J9
```

#### Pythonic way:

```python
a = [chr(i) for i in range(ord('A'), ord('J') + 1)]

b = [i + str(j) for j in range(10) for i in a]

print(''.join('\n'+b[i]+' ' if i%10==0 and i>0 else b[i]+' ' 
                for i in range(len(b))))

A0 B0 C0 D0 E0 F0 G0 H0 I0 J0
A1 B1 C1 D1 E1 F1 G1 H1 I1 J1
A2 B2 C2 D2 E2 F2 G2 H2 I2 J2
A3 B3 C3 D3 E3 F3 G3 H3 I3 J3
A4 B4 C4 D4 E4 F4 G4 H4 I4 J4
A5 B5 C5 D5 E5 F5 G5 H5 I5 J5
A6 B6 C6 D6 E6 F6 G6 H6 I6 J6
A7 B7 C7 D7 E7 F7 G7 H7 I7 J7
A8 B8 C8 D8 E8 F8 G8 H8 I8 J8
A9 B9 C9 D9 E9 F9 G9 H9 I9 J9
```

## Read char from the input

* [getch, readchar](https://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user)

```python
class _Getch:
    ''' Gets a single char grom stdin. 
    Does not echo to the screen '''
    
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()
        
    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys
    
    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)

        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt
    
    def __call__(self):
        import msvcrt
        return msvcrt.getch()

# getch = _Getch()
# key   = getch.__call__()

# print("Pressed key is: ", key)
```